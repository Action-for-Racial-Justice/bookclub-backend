// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Action-for-Racial-Justice/bookclub-backend/internal/handlers (interfaces: Handlers)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// CreateUserClubMember mocks base method.
func (m *MockHandlers) CreateUserClubMember(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateUserClubMember", arg0, arg1)
}

// CreateUserClubMember indicates an expected call of CreateUserClubMember.
func (mr *MockHandlersMockRecorder) CreateUserClubMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserClubMember", reflect.TypeOf((*MockHandlers)(nil).CreateUserClubMember), arg0, arg1)
}

// GetBookData mocks base method.
func (m *MockHandlers) GetBookData(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetBookData", arg0, arg1)
}

// GetBookData indicates an expected call of GetBookData.
func (mr *MockHandlersMockRecorder) GetBookData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookData", reflect.TypeOf((*MockHandlers)(nil).GetBookData), arg0, arg1)
}

// GetClub mocks base method.
func (m *MockHandlers) GetClub(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetClub", arg0, arg1)
}

// GetClub indicates an expected call of GetClub.
func (mr *MockHandlersMockRecorder) GetClub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClub", reflect.TypeOf((*MockHandlers)(nil).GetClub), arg0, arg1)
}

// GetClubs mocks base method.
func (m *MockHandlers) GetClubs(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetClubs", arg0, arg1)
}

// GetClubs indicates an expected call of GetClubs.
func (mr *MockHandlersMockRecorder) GetClubs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubs", reflect.TypeOf((*MockHandlers)(nil).GetClubs), arg0, arg1)
}

// GetUserData mocks base method.
func (m *MockHandlers) GetUserData(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUserData", arg0, arg1)
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockHandlersMockRecorder) GetUserData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockHandlers)(nil).GetUserData), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockHandlers) HealthCheck(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HealthCheck", arg0, arg1)
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockHandlersMockRecorder) HealthCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockHandlers)(nil).HealthCheck), arg0, arg1)
}

// ServeHTTP mocks base method.
func (m *MockHandlers) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockHandlersMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockHandlers)(nil).ServeHTTP), arg0, arg1)
}
