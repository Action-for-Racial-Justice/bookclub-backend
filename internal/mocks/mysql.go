// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Action-for-Racial-Justice/bookclub-backend/internal/mysql (interfaces: Mysql)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Action-for-Racial-Justice/bookclub-backend/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMysql is a mock of Mysql interface.
type MockMysql struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlMockRecorder
}

// MockMysqlMockRecorder is the mock recorder for MockMysql.
type MockMysqlMockRecorder struct {
	mock *MockMysql
}

// NewMockMysql creates a new mock instance.
func NewMockMysql(ctrl *gomock.Controller) *MockMysql {
	mock := &MockMysql{ctrl: ctrl}
	mock.recorder = &MockMysqlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysql) EXPECT() *MockMysqlMockRecorder {
	return m.recorder
}

// CreateUserClubMember mocks base method.
func (m *MockMysql) CreateUserClubMember(arg0 *models.JoinClubRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserClubMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserClubMember indicates an expected call of CreateUserClubMember.
func (mr *MockMysqlMockRecorder) CreateUserClubMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserClubMember", reflect.TypeOf((*MockMysql)(nil).CreateUserClubMember), arg0)
}

// GetBookDataForID mocks base method.
func (m *MockMysql) GetBookDataForID(arg0 string) (*models.BookData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookDataForID", arg0)
	ret0, _ := ret[0].(*models.BookData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookDataForID indicates an expected call of GetBookDataForID.
func (mr *MockMysqlMockRecorder) GetBookDataForID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookDataForID", reflect.TypeOf((*MockMysql)(nil).GetBookDataForID), arg0)
}

// GetClubDataForID mocks base method.
func (m *MockMysql) GetClubDataForID(arg0 string) (*models.ClubData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClubDataForID", arg0)
	ret0, _ := ret[0].(*models.ClubData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClubDataForID indicates an expected call of GetClubDataForID.
func (mr *MockMysqlMockRecorder) GetClubDataForID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubDataForID", reflect.TypeOf((*MockMysql)(nil).GetClubDataForID), arg0)
}

// GetUserDataForUserID mocks base method.
func (m *MockMysql) GetUserDataForUserID(arg0 string) (*models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataForUserID", arg0)
	ret0, _ := ret[0].(*models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataForUserID indicates an expected call of GetUserDataForUserID.
func (mr *MockMysqlMockRecorder) GetUserDataForUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataForUserID", reflect.TypeOf((*MockMysql)(nil).GetUserDataForUserID), arg0)
}
