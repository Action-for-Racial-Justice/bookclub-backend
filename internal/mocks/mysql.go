// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Action-for-Racial-Justice/bookclub-backend/internal/mysql (interfaces: Mysql)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Action-for-Racial-Justice/bookclub-backend/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMysql is a mock of Mysql interface.
type MockMysql struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlMockRecorder
}

// MockMysqlMockRecorder is the mock recorder for MockMysql.
type MockMysqlMockRecorder struct {
	mock *MockMysql
}

// NewMockMysql creates a new mock instance.
func NewMockMysql(ctrl *gomock.Controller) *MockMysql {
	mock := &MockMysql{ctrl: ctrl}
	mock.recorder = &MockMysqlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysql) EXPECT() *MockMysqlMockRecorder {
	return m.recorder
}

// CreateClub mocks base method.
func (m *MockMysql) CreateClub(arg0 *models.CreateClubRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClub", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClub indicates an expected call of CreateClub.
func (mr *MockMysqlMockRecorder) CreateClub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClub", reflect.TypeOf((*MockMysql)(nil).CreateClub), arg0)
}

// CreateUserClubMember mocks base method.
func (m *MockMysql) CreateUserClubMember(arg0 *models.JoinClubRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserClubMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserClubMember indicates an expected call of CreateUserClubMember.
func (mr *MockMysqlMockRecorder) CreateUserClubMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserClubMember", reflect.TypeOf((*MockMysql)(nil).CreateUserClubMember), arg0)
}

// GetBookDataForEntryID mocks base method.
func (m *MockMysql) GetBookDataForEntryID(arg0 string) (*models.BookData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookDataForEntryID", arg0)
	ret0, _ := ret[0].(*models.BookData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookDataForEntryID indicates an expected call of GetBookDataForEntryID.
func (mr *MockMysqlMockRecorder) GetBookDataForEntryID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookDataForEntryID", reflect.TypeOf((*MockMysql)(nil).GetBookDataForEntryID), arg0)
}

// GetClubDataForEntryID mocks base method.
func (m *MockMysql) GetClubDataForEntryID(arg0 string) (*models.ClubData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClubDataForEntryID", arg0)
	ret0, _ := ret[0].(*models.ClubData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClubDataForEntryID indicates an expected call of GetClubDataForEntryID.
func (mr *MockMysqlMockRecorder) GetClubDataForEntryID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClubDataForEntryID", reflect.TypeOf((*MockMysql)(nil).GetClubDataForEntryID), arg0)
}

// GetListClubs mocks base method.
func (m *MockMysql) GetListClubs() (*models.ListClubs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListClubs")
	ret0, _ := ret[0].(*models.ListClubs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListClubs indicates an expected call of GetListClubs.
func (mr *MockMysqlMockRecorder) GetListClubs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListClubs", reflect.TypeOf((*MockMysql)(nil).GetListClubs))
}

// GetUserClubMembers mocks base method.
func (m *MockMysql) GetUserClubMembers(arg0 string) ([]models.ClubMemberData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserClubMembers", arg0)
	ret0, _ := ret[0].([]models.ClubMemberData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserClubMembers indicates an expected call of GetUserClubMembers.
func (mr *MockMysqlMockRecorder) GetUserClubMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserClubMembers", reflect.TypeOf((*MockMysql)(nil).GetUserClubMembers), arg0)
}

// GetUserClubs mocks base method.
func (m *MockMysql) GetUserClubs(arg0 []models.ClubMemberData) (*models.ListClubs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserClubs", arg0)
	ret0, _ := ret[0].(*models.ListClubs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserClubs indicates an expected call of GetUserClubs.
func (mr *MockMysqlMockRecorder) GetUserClubs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserClubs", reflect.TypeOf((*MockMysql)(nil).GetUserClubs), arg0)
}

// GetUserDataForUserID mocks base method.
func (m *MockMysql) GetUserDataForUserID(arg0 string) (*models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataForUserID", arg0)
	ret0, _ := ret[0].(*models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataForUserID indicates an expected call of GetUserDataForUserID.
func (mr *MockMysqlMockRecorder) GetUserDataForUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataForUserID", reflect.TypeOf((*MockMysql)(nil).GetUserDataForUserID), arg0)
}
